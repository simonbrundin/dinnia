import{B as b,C as d,f as v,A as F,o as f,h as g,D as x,u as w,F as E,E as V,t as _}from"./entry.ae526870.js";var c=new Map,u=new Map,p=!0,m=!1;function h(e){return e.replace(/[\s,]+/g," ").trim()}function y(e){return h(e.source.body.substring(e.start,e.end))}function k(e){var n=new Set,a=[];return e.definitions.forEach(function(t){if(t.kind==="FragmentDefinition"){var r=t.name.value,i=y(t.loc),s=u.get(r);s&&!s.has(i)?p&&console.warn("Warning: fragment with name "+r+` already exists.
graphql-tag enforces all fragment names across your application to be unique; read more about
this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names`):s||u.set(r,s=new Set),s.add(i),n.has(i)||(n.add(i),a.push(t))}else a.push(t)}),d(d({},e),{definitions:a})}function C(e){var n=new Set(e.definitions);n.forEach(function(t){t.loc&&delete t.loc,Object.keys(t).forEach(function(r){var i=t[r];i&&typeof i=="object"&&n.add(i)})});var a=e.loc;return a&&(delete a.startToken,delete a.endToken),e}function W(e){var n=h(e);if(!c.has(n)){var a=b(e,{experimentalFragmentVariables:m,allowLegacyFragmentVariables:m});if(!a||a.kind!=="Document")throw new Error("Not a valid GraphQL document.");c.set(n,C(k(a)))}return c.get(n)}function l(e){for(var n=[],a=1;a<arguments.length;a++)n[a-1]=arguments[a];typeof e=="string"&&(e=[e]);var t=e[0];return n.forEach(function(r,i){r&&r.kind==="Document"?t+=r.loc.source.body:t+=r,t+=e[i+1]}),W(t)}function q(){c.clear(),u.clear()}function L(){p=!1}function A(){m=!0}function B(){m=!1}var o={gql:l,resetCaches:q,disableFragmentWarnings:L,enableExperimentalFragmentVariables:A,disableExperimentalFragmentVariables:B};(function(e){e.gql=o.gql,e.resetCaches=o.resetCaches,e.disableFragmentWarnings=o.disableFragmentWarnings,e.enableExperimentalFragmentVariables=o.enableExperimentalFragmentVariables,e.disableExperimentalFragmentVariables=o.disableExperimentalFragmentVariables})(l||(l={}));l.default=l;const M={class:"text-white"},D=v({__name:"[id]",async setup(e){let n,a;const{data:t}=([n,a]=F(()=>V(l`
    query GetIngredient($id: Int = 1) {
      ingredient(where: { id: { _eq: $id } }) {
        id
        name
        standard_unit
      }
    }
  `)),n=await n,a(),n);return(r,i)=>(f(!0),g(E,null,x(w(t).ingredient,s=>(f(),g("div",M,_(s.name),1))),256))}});export{D as default};
